"use strict";

var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");

var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ProgressBar = ProgressBar;

  var React = _interopRequireWildcard(require("react"));

  var _clsx = _interopRequireDefault(require("clsx"));

  var _utils = require("./../utils");

  var _jsxFileName = "C:\\Users\\Shivansh\\Codebase\\material-react-toastify\\src\\components\\ProgressBar.tsx";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

  function ProgressBar({
    delay,
    isRunning,
    closeToast,
    type,
    hide,
    className,
    style: userStyle,
    controlledProgress,
    progress,
    rtl,
    isIn
  }) {
    const style = { ...userStyle,
      animationDuration: `${delay}ms`,
      animationPlayState: isRunning ? 'running' : 'paused',
      opacity: hide ? 0 : 1
    };
    if (controlledProgress) style.transform = `scaleX(${progress})`;
    const defaultClassArr = [`${_utils.DEFAULT.CSS_NAMESPACE}__progress-bar`, controlledProgress ? `${_utils.DEFAULT.CSS_NAMESPACE}__progress-bar--controlled` : `${_utils.DEFAULT.CSS_NAMESPACE}__progress-bar--animated`, `${_utils.DEFAULT.CSS_NAMESPACE}__progress-bar--${type}`, {
      [`${_utils.DEFAULT.CSS_NAMESPACE}__progress-bar--rtl`]: rtl
    }];
    const classNames = (0, _utils.isFn)(className) ? className({
      rtl,
      type,
      defaultClassName: (0, _clsx.default)(...defaultClassArr)
    }) : (0, _clsx.default)(...[...defaultClassArr, className]); // 🧐 controlledProgress is derived from progress
    // so if controlledProgress is set
    // it means that this is also the case for progress

    const animationEvent = {
      [controlledProgress && progress >= 1 ? 'onTransitionEnd' : 'onAnimationEnd']: controlledProgress && progress < 1 ? null : () => {
        isIn && closeToast();
      }
    };
    return /*#__PURE__*/React.createElement("div", _extends({
      className: classNames,
      style: style
    }, animationEvent, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 117,
        columnNumber: 10
      }
    }));
  }

  ProgressBar.defaultProps = {
    type: _utils.TYPE.DEFAULT,
    hide: false
  };
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}