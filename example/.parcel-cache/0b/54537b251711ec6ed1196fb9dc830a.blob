"use strict";

var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");

var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Toast = void 0;

  var React = _interopRequireWildcard(require("react"));

  var _clsx = _interopRequireDefault(require("clsx"));

  var _ProgressBar = require("./ProgressBar");

  var _utils = require("../utils");

  var _hooks = require("../hooks");

  var _jsxFileName = "C:\\Users\\Shivansh\\Codebase\\material-react-toastify\\src\\components\\Toast.tsx";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

  const Toast = props => {
    const {
      isRunning,
      preventExitTransition,
      toastRef,
      eventHandlers
    } = (0, _hooks.useToast)(props);
    const {
      closeButton,
      children,
      autoClose,
      onClick,
      type,
      hideProgressBar,
      closeToast,
      transition: Transition,
      position,
      className,
      style,
      bodyClassName,
      bodyStyle,
      progressClassName,
      progressStyle,
      updateId,
      role,
      progress,
      rtl,
      toastId,
      deleteToast
    } = props;
    const defaultClassArr = [`${_utils.DEFAULT.CSS_NAMESPACE}__toast`, `${_utils.DEFAULT.CSS_NAMESPACE}__toast--${type}`, {
      [`${_utils.DEFAULT.CSS_NAMESPACE}__toast--rtl`]: rtl
    }];
    const cssClasses = (0, _utils.isFn)(className) ? className({
      rtl,
      position,
      type,
      defaultClassName: (0, _clsx.default)(...defaultClassArr)
    }) : (0, _clsx.default)(...[...defaultClassArr, className]);
    const controlledProgress = !!progress;

    function renderCloseButton(closeButton) {
      if (!closeButton) return;
      const props = {
        closeToast,
        type
      };
      if ((0, _utils.isFn)(closeButton)) return closeButton(props);
      if ( /*#__PURE__*/React.isValidElement(closeButton)) return /*#__PURE__*/React.cloneElement(closeButton, props);
    }

    return /*#__PURE__*/React.createElement(Transition, {
      in: props.in,
      appear: true,
      done: deleteToast,
      position: position,
      preventExitTransition: preventExitTransition,
      nodeRef: toastRef,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 66,
        columnNumber: 5
      }
    }, /*#__PURE__*/React.createElement("div", _extends({
      id: toastId,
      onClick: onClick,
      className: cssClasses || undefined
    }, eventHandlers, {
      style: style,
      ref: toastRef,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 74,
        columnNumber: 7
      }
    }), /*#__PURE__*/React.createElement("div", _extends({}, props.in && {
      role: role
    }, {
      className: (0, _utils.isFn)(bodyClassName) ? bodyClassName({
        type
      }) : (0, _clsx.default)(`${_utils.DEFAULT.CSS_NAMESPACE}__toast-body`, bodyClassName),
      style: bodyStyle,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 82,
        columnNumber: 9
      }
    }), children), renderCloseButton(closeButton), (autoClose || controlledProgress) && /*#__PURE__*/React.createElement(_ProgressBar.ProgressBar, _extends({}, updateId && !controlledProgress ? {
      key: `pb-${updateId}`
    } : {}, {
      rtl: rtl,
      delay: autoClose,
      isRunning: isRunning,
      isIn: props.in,
      closeToast: closeToast,
      hide: hideProgressBar,
      type: type,
      style: progressStyle,
      className: progressClassName,
      controlledProgress: controlledProgress,
      progress: progress,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 95,
        columnNumber: 11
      }
    }))));
  };

  exports.Toast = Toast;
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}