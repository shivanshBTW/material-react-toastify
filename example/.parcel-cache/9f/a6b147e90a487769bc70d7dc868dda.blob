"use strict";

var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");

var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.cssTransition = cssTransition;

  var React = _interopRequireWildcard(require("react"));

  var _reactTransitionGroup = require("react-transition-group");

  var _collapseToast = require("./collapseToast");

  var _constant = require("./constant");

  var _jsxFileName = "C:\\Users\\Shivansh\\Codebase\\material-react-toastify\\src\\utils\\cssTransition.tsx";

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

  function cssTransition({
    enter,
    exit,
    duration = 750,
    appendPosition = false,
    collapse = true,
    collapseDuration = _constant.DEFAULT.COLLAPSE_DURATION
  }) {
    let enterDuration, exitDuration;

    if (Array.isArray(duration) && duration.length === 2) {
      [enterDuration, exitDuration] = duration;
    } else {
      enterDuration = exitDuration = duration;
    }

    return function ToastTransition({
      children,
      position,
      preventExitTransition,
      done,
      ...props
    }) {
      const enterClassName = appendPosition ? `${enter}--${position}` : enter;
      const exitClassName = appendPosition ? `${exit}--${position}` : exit;

      const onEnter = () => {
        const node = props.nodeRef.current;

        if (node) {
          node.classList.add(enterClassName);
          node.style.animationFillMode = 'forwards';
          node.style.animationDuration = `${enterDuration}ms`;
        }
      };

      const onEntered = () => {
        const node = props.nodeRef.current;

        if (node) {
          node.classList.remove(enterClassName);
          node.style.cssText = '';
        }
      };

      const onExited = () => {
        const node = props.nodeRef.current;

        if (node) {
          node.removeEventListener('animationend', onExited);
          collapse ? (0, _collapseToast.collapseToast)(node, done, collapseDuration) : done();
        }
      };

      const onExit = () => {
        const node = props.nodeRef.current;

        if (node) {
          node.classList.add(exitClassName);
          node.style.animationFillMode = 'forwards';
          node.style.animationDuration = `${exitDuration}ms`;
          node.addEventListener('animationend', onExited);
        }
      };

      return /*#__PURE__*/React.createElement(_reactTransitionGroup.Transition, _extends({}, props, {
        timeout: preventExitTransition ? collapse ? collapseDuration : _constant.DEFAULT.DEBOUNCE_DURATION : {
          enter: enterDuration,
          exit: collapse ? exitDuration + collapseDuration : exitDuration + _constant.DEFAULT.DEBOUNCE_DURATION
        },
        onEnter: onEnter,
        onEntered: onEntered,
        onExit: preventExitTransition ? onExited : onExit,
        unmountOnExit: true,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 109,
          columnNumber: 7
        }
      }), children);
    };
  }

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}